Program ::= Scope ;

Scope ::= Stmt* ;

Stmt ::= DeclareConstVariable
       | DeclareVariable
       | AssignVariable
       | ReturnStmt
       | FunctionCall
       | IfStatement
       | WhileLoop
       | MetaStmt ;

Comment ::= "//" .* | "/*" .* "*/" ;

VisibilityBlock ::= ( "public" | "private" ) "{" Stmt* "}" ;
MetaStmt ::= "@" ( PackageStmt | ImportStmt )

PackageStmt ::= "pkg" [a-zA-Z_]+ ;
ImportStmt ::= "imp as" Identifier "from" StringLiteral ;

FunctionCallStmt ::= FunctionCall ";" ;
DeclareConstVariable ::= "const" DeclareVariable ;
DeclareVariable ::= ( "var" | TypeKeyword ) Identifier "=" Value ";" ;
AssignVariable ::= Identifier "=" Value ";" ;
ReturnStmt ::= "return" Primary ";" ;

Function ::= "func" Identifier "(" ( Value ( "," Value )* )? ")" ( ":" TypeKeyword )? "{" Scope "}" ;
IfStatement ::= "if" "(" ( Value ( "," Value )* )? ")" "{" Scope "}" ;
WhileLoop ::= "while" "(" Value ")" "{" Scope "}" ;

Identifier ::= [a-zA-Z_][a-zA-Z0-9_]* ;
FunctionCall ::= ( BuiltInFunction | Identifier ) "(" ( Value ( "," Value )* )? ")" ;

Value ::= LogicalOr ;

LogicalOr ::= LogicalAnd ( "||" LogicalAnd )* ;
LogicalAnd ::= Equality ( "&&" Equality )* ;
Equality ::= Comparison ( ( "==" | "!=" ) Comparison )* ;
Comparison ::= Term ( ( ">" | ">=" | "<" | "<=" ) Term )* ;
Term ::= Factor ( ( "+" | "-" ) Factor )* ;
Factor ::= Unary ( ( "*" | "/" | "%" ) Unary )* ;
Unary ::= ( "!" | "-" )? Primary ;

Primary ::= IntegerLiteral
          | FloatLiteral
          | StringLiteral
          | BooleanLiteral
          | Identifier
          | FunctionCall
          | "(" Value ")" ;

IntegerLiteral ::= [0-9]+ ;
FloatLiteral ::= [0-9]* "." [0-9]+ [fF]?
               | [0-9]+ [fF]? ;
StringLiteral ::= "\"" ( [^"\\] | "\\" . )* "\"" ;
BooleanLiteral ::= "true" | "false" ;

BuiltInFunction ::= "print" ;
TypeKeyword ::= "int" | "float" | "string" | "bool" | "void" ;